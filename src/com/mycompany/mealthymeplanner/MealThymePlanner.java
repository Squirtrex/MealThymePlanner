package com.mycompany.mealthymeplanner;


import com.codename1.components.SpanLabel;
import static com.codename1.ui.CN.*;

import com.codename1.ui.*;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;

import java.io.IOException;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.layouts.GridLayout;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.*;
import java.util.List;
import java.util.concurrent.atomic.AtomicReference;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename
 * One</a> for the purpose of building native mobile applications using Java.
 */
public class MealThymePlanner {

    /**
     * This holds the hashmap after being initialized.
     */
    HashMap<String, Recipe> hashmap;

    private Form currentForm;
    private Form previousForm;
    private Resources theme;
    private Form mainMenuForm;
    private Form futurePlanningForm;
    private Form futureRecipesForm;
    private Form futureAddForm;
    private Form savedRecipesForm;
    private Form newUserForm;
    private Form favoriteCuisinesForm;
    private Form allergiesForm;
    private Form myRecipesForm;
    private Form addCustomRecipeForm;
    private Form favoriteRecipesForm;
    private Form profileForm;
    private Form browseForm;
    private Form recommendedForm;
    private Form searchForm;
    private Form recipeForm;

    // Replace with actual User later
    private User currentUser = new User();
    private ArrayList<String> cuisineTypes = new ArrayList<>(Arrays.asList("Italian", "Mexican", "American", "Asian", "African", "Middle Eastern"));
    private ArrayList<String> allergies = new ArrayList<>(Arrays.asList("Dairy", "Gluten", "Nuts", "Shellfish"));

    //Tester objects, delete later
    Ingredient testIngred1 = new Ingredient("Test Ingred 1");
    RecipeIngredient testRecipeIngred1 = new RecipeIngredient(4.0, "cups", testIngred1);
    private ArrayList<RecipeIngredient> testArray = new ArrayList<>(Arrays.asList(testRecipeIngred1, testRecipeIngred1));
    private Recipe testRecipe1 = new Recipe("Test Recipe 1", testArray, new ArrayList<String>(), "3 servings", 300, 30, new ArrayList<RecipeTag>());
    private Recipe testRecipe2 = new Recipe("Test Recipe 2", testArray, new ArrayList<String>(), "5 servings", 500, 50, new ArrayList<RecipeTag>());
    private Recipe testRecipe3 = new Recipe("Test Recipe 3", testArray, new ArrayList<String>(), "7 servings", 700, 70, new ArrayList<RecipeTag>());



    /**
     * This builds the hashmap and places it into the hashmap variable.
     */
    public void initializeHashMap(){
        try {
            CSV_to_HashMap h = new CSV_to_HashMap();
            hashmap = h.getHashMap();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    //Method builds the Main menu form
    public void setMainMenuForm() {
        Form tempForm = new Form("Main Menu", new GridLayout(3, 2));
        Button recommendedButton = new Button("Recommended");
        Button savedRecipesButton = new Button("Saved Recipes");
        Button browseButton = new Button("Browse");
        Button searchButton = new Button("Search");
        Button futureButton = new Button("Plan Future Meals");
        Button profileButton = new Button("Profile");
        tempForm.add(recommendedButton);
        tempForm.add(savedRecipesButton);
        tempForm.add(browseButton);
        tempForm.add(searchButton);
        tempForm.add(futureButton);
        tempForm.add(profileButton);

        recommendedButton.addActionListener((e) -> recommendedForm.show());
        savedRecipesButton.addActionListener((e) -> savedRecipesForm.show());
        browseButton.addActionListener((e) -> browseForm.show());
        searchButton.addActionListener((e) -> searchForm.show());
        futureButton.addActionListener((e) -> futurePlanningForm.show());
        profileButton.addActionListener((e) ->
        {
            setProfileForm();
            profileForm.show();
        });

        mainMenuForm = tempForm;
    }
    
    public void setRecipeForm(Recipe recipe) {
        Form tempForm = new Form("Recipe", BoxLayout.y());
        
        Label recipeNameLabel = new Label(recipe.getName());
        Label servingsLabel = new Label("Servings: " + recipe.getServings());
        Label caloriesLabel = new Label("Calories: " + recipe.getCalories());
        Label cookTimeLabel = new Label("Cook Time: " + recipe.getCookTimeMinutes() + " minutes"); 
        Label ingrLabel = new Label("Ingredients: ");
        ArrayList<SpanLabel> ingredientLabels = new ArrayList<>();
        
        for(RecipeIngredient ingred: recipe.getIngredients())
        {
            ingredientLabels.add(new SpanLabel(ingred.getIngredient().getName()));
        }        
        
        Label dirLabel = new Label("Directions: "); 
        ArrayList<SpanLabel> directionsLabels = new ArrayList<>();
        
        for(String direc: recipe.getDirections())
        {
            directionsLabels.add(new SpanLabel(direc));
        }

        String removeText = "Remove from Favorites";
        String addText = "Add to Favorites";
        String favButtText;
        if(currentUser.getFavoriteRecipes().get(recipe.getName()) != null)
        {
            favButtText = removeText;
        }
        else {
            favButtText = addText;
        }

        Button favoriteButton = new Button(favButtText);
        Button futureButton = new Button("Make recipe later");
        Button backButton = new Button("Back");
        Button homeButton = new Button("Home");
        
        tempForm.add(recipeNameLabel);
        tempForm.add(servingsLabel);
        tempForm.add(caloriesLabel);
        tempForm.add(cookTimeLabel);
        tempForm.add(ingrLabel);        
        for (SpanLabel lab : ingredientLabels) {
            tempForm.add(lab);
        }
        tempForm.add(dirLabel);
        for (SpanLabel lab : directionsLabels) {
            tempForm.add(lab);
        }
        tempForm.add(favoriteButton);
        tempForm.add(futureButton);
        tempForm.add(backButton);
        tempForm.add(homeButton);

        favoriteButton.addActionListener((e) -> {
            if(favButtText.equals(addText)) {
                currentUser.addFavoriteRecipe(recipe);
                favoriteButton.setText(removeText);
                setFavoriteRecipesForm();
            }
            else {
                currentUser.removeFavoriteRecipe(recipe);
                favoriteButton.setText(addText);
                setFavoriteRecipesForm();
            }
        });

        futureButton.addActionListener((e) ->
        {
            currentUser.addFutureRecipe(recipe);
            setFutureRecipesForm();
        });

        backButton.addActionListener((e) ->
        {
            if(previousForm.equals(favoriteRecipesForm))
            {
                setFavoriteRecipesForm();
            }
            showPreviousForm();
        });

        homeButton.addActionListener((e) -> mainMenuForm.show());

        recipeForm = tempForm;
    }

    public void setFuturePlanningForm() {
        Form tempForm = new Form("Future Meal Planner", BoxLayout.y());

        Button futureButton = new Button("View My Planned Recipes");
        Button planButton = new Button("Plan some future meals");
        Label blankLabel = new Label(" ");
        Button homeButton = new Button("Home");

        tempForm.add(futureButton);
        tempForm.add(planButton);
        tempForm.add(blankLabel);
        tempForm.add(homeButton);

        futureButton.addActionListener((e) -> futureRecipesForm.show());
        planButton.addActionListener((e) -> futureAddForm.show());
        homeButton.addActionListener((e) -> mainMenuForm.show());

        futurePlanningForm = tempForm;
    }

    public void setFutureRecipesForm() {
        Form tempForm = new Form("My Planned Recipes", BoxLayout.y());

        ArrayList<Button> recipeButtons = new ArrayList<>();

        for(Recipe rec: currentUser.getFutureRecipes())
        {
            Button tempButton = new Button(rec.getName());
            tempButton.addActionListener((e) ->
            {
                setRecipeForm(rec);
                setPreviousForm(futureRecipesForm);
                recipeForm.show();
            });
            recipeButtons.add(tempButton);
        }

        Label blankLabel = new Label(" ");
        Button backButton = new Button("Back");
        Button homeButton = new Button("Home");


        for(Button but: recipeButtons)
        {
            tempForm.add(but);
        }
        tempForm.add(blankLabel);
        tempForm.add(backButton);
        tempForm.add(homeButton);

        backButton.addActionListener((e) -> futurePlanningForm.show());
        homeButton.addActionListener((e) -> mainMenuForm.show());

        futureRecipesForm = tempForm;
    }

    public void setFutureAddForm() {
        Form tempForm = new Form("Add Future Meals", BoxLayout.y());

        Button recommendedButton = new Button("Recommended Recipes");
        Button customButton = new Button("My Recipes");
        Button favoriteButton = new Button("Favorite Recipes");
        Label blankLabel = new Label(" ");
        Button backButton = new Button("Back");
        Button homeButton = new Button("Home");

        tempForm.add(recommendedButton);
        tempForm.add(customButton );
        tempForm.add(favoriteButton);
        tempForm.add(blankLabel);
        tempForm.add(backButton);
        tempForm.add(homeButton);

        recommendedButton.addActionListener((e) -> recommendedForm.show());
        customButton.addActionListener((e) -> myRecipesForm.show());
        favoriteButton.addActionListener((e) -> favoriteRecipesForm.show());
        backButton.addActionListener((e) -> futurePlanningForm.show());
        homeButton.addActionListener((e) -> mainMenuForm.show());

        futureAddForm = tempForm;
    }
    
    public void setBrowseForm() {
        Form tempForm = new Form("Browse", new GridLayout(8, 1));

        Button cuisineButton1 = new Button("Italian");
        Button cuisineButton2 = new Button("Mexican");
        Button cuisineButton3 = new Button("American");
        Button cuisineButton4 = new Button("Asian");
        Button cuisineButton5 = new Button("African");
        Button cuisineButton6 = new Button("Middle Eastern");
        Label blankLabel = new Label("");
        Button homeButton = new Button("Home");

        tempForm.add(cuisineButton1);
        tempForm.add(cuisineButton2);
        tempForm.add(cuisineButton3);
        tempForm.add(cuisineButton4);
        tempForm.add(cuisineButton5);
        tempForm.add(cuisineButton6);
        tempForm.add(blankLabel);
        tempForm.add(homeButton);
        homeButton.addActionListener((e) -> mainMenuForm.show());

        browseForm = tempForm;
    }
    
    public void setRecommendedForm() {
        Form tempForm = new Form("Recommended For You", new GridLayout(8, 1));
        Recipe databaseRecipe = hashmap.get("Gravel Salad");

        /*
        // Testing Recipes
        System.out.println(databaseRecipe.getIngredients());
        Recipe recRecipe1 = testRecipe1;
        Recipe recRecipe1 = databaseRecipe;
        Recipe recRecipe2 = testRecipe2;
        Recipe recRecipe3 = testRecipe3;
        */

        Recipe[] topThree = PriorityMachine.simpleRecThree(currentUser, 300, hashmap);
        Recipe recRecipe1 = topThree[0];
        Recipe recRecipe2 = topThree[1];
        Recipe recRecipe3 = topThree[2];

        Button recipe1Button = new Button(recRecipe1.getName());
        Button recipe2Button = new Button(recRecipe2.getName());
        Button recipe3Button = new Button(recRecipe3.getName());
        Label refreshLabel = new Label("Or click below to refresh your options");
        Button refreshButton = new Button("Refresh Options");
        Label blank = new Label("");
        Button homeButton = new Button("Home");

        tempForm.add(recipe1Button);
        tempForm.add(recipe2Button);
        tempForm.add(recipe3Button);
        tempForm.add(refreshLabel);
        tempForm.add(refreshButton);
        tempForm.add(blank);
        tempForm.add(homeButton);


        recipe1Button.addActionListener((e) ->
        {   
            setRecipeForm(recRecipe1);
            setPreviousForm(recommendedForm);
            recipeForm.show();
        });

        recipe2Button.addActionListener((e) ->
        {
            setRecipeForm(recRecipe2);
            setPreviousForm(recommendedForm);
            recipeForm.show();
        });

        recipe3Button.addActionListener((e) ->
        {
            setRecipeForm(recRecipe3);
            setPreviousForm(recommendedForm);
            recipeForm.show();
        });

        refreshButton.addActionListener((e) ->
        {
            // INSERT CODE HERE TO REFRESH OPTIONS
            setRecommendedForm();
            recommendedForm.show();
        });

        homeButton.addActionListener((e) -> mainMenuForm.show());

        recommendedForm = tempForm;
    }
    
    public void setSearchForm() {
        Form tempForm = new Form("Search", BoxLayout.y());
        Button homeButton = new Button("Home");
        tempForm.add(homeButton);
        homeButton.addActionListener((e) -> mainMenuForm.show());

        searchForm = tempForm;
    }

    public void setSavedRecipesForm() {
        Form tempForm = new Form("Saved Recipes", new GridLayout(8, 1));

        Button myRecipesButton = new Button("My Recipes");
        Button favoriteButton = new Button("Favorite Recipes");
        Button customButton = new Button("Add Custom Recipe");
        Label blankLabel = new Label(" ");
        Button homeButton = new Button("Home");

        tempForm.add(myRecipesButton);
        tempForm.add(favoriteButton);
        tempForm.add(customButton);
        tempForm.add(blankLabel);
        tempForm.add(homeButton);

        homeButton.addActionListener((e) -> mainMenuForm.show());
        myRecipesButton.addActionListener((e) ->
        {
            setMyRecipesForm();
            myRecipesForm.show();
        });
        customButton.addActionListener((e) -> addCustomRecipeForm.show());
        favoriteButton.addActionListener((e) ->
        {
            setFavoriteRecipesForm();
            favoriteRecipesForm.show();
        });

        savedRecipesForm = tempForm;
    }

    public void setMyRecipesForm() {
        Form tempForm = new Form("My Recipes", BoxLayout.y());
        ArrayList<Button> recipeButtons = new ArrayList<>();

        for(String rec: currentUser.getCustomRecipes().keySet())
        {
            Button tempButton = new Button(rec);
            tempButton.addActionListener((e) ->
                    {
                        setRecipeForm(currentUser.getCustomRecipes().get(rec));
                        setPreviousForm(myRecipesForm);
                        recipeForm.show();
                    });
            recipeButtons.add(tempButton);
        }

        Label blankLabel = new Label(" ");
        Button homeButton = new Button("Home");
        Button backButton = new Button("Back");

        for(Button but: recipeButtons)
        {
            tempForm.add(but);
        }
        tempForm.add(blankLabel);
        tempForm.add(homeButton);
        tempForm.add(backButton);
        homeButton.addActionListener((e) -> mainMenuForm.show());
        backButton.addActionListener((e) -> savedRecipesForm.show());

        myRecipesForm = tempForm;
    }

    public void setAddCustomRecipeForm() {
        Form tempForm = new Form("Add Custom Recipe", BoxLayout.y());
        Recipe newRecipe = new Recipe();

        SpanLabel instructLabel = new SpanLabel("Please fill in the following information.");
        Label recipeNameLabel = new Label("Recipe Name: ");
        TextField nameField = new TextField("", "Recipe Name", 40, TextArea.ANY);
        Label servingsLabel = new Label("Servings: ");
        TextField servingsField = new TextField("", "Servings", 5, TextArea.NUMERIC);
        Label caloriesLabel = new Label("Calories: ");
        TextField caloriesField = new TextField("", "Calories", 5, TextArea.NUMERIC);
        Label cookTimeLabel = new Label("Cook Time (min): " );
        TextField cookTimeField = new TextField("", "Cook Time", 5, TextArea.NUMERIC);

        /*
        // Used to split up ingredients into their respective parts, implement later
        TextField ingrAmountField = new TextField("", "Amount", 10, TextArea.NUMERIC);
        TextField ingrAmountTypeField = new TextField("", "Type (ex. cups)", 12, TextArea.ANY);
        TextField ingrNameField = new TextField("", "Ingredient", 20, TextArea.ANY);
        Container IngredContainer = BoxLayout.encloseX(ingrAmountField, ingrAmountTypeField, ingrNameField);
        */

        Label ingrLabel = new Label("Ingredients: ");
        Container ingredContainer = new Container(BoxLayout.y());
        TextField ingrFieldTemp = new TextField("", "Ingredient", 40, TextArea.ANY);
        ingredContainer.add(ingrFieldTemp);
        Button addIngredientButton = new Button("+ Ingredient");

        Label direcLabel = new Label("Directions: ");
        Container direcContainer = new Container(BoxLayout.y());
        TextField direcFieldTemp = new TextField("", "Direction", 40, TextArea.ANY);
        direcContainer.add(direcFieldTemp);
        Button addDirectionButton = new Button("+ Step");

        Button addButton = new Button("Add Recipe");
        Button cancelButton = new Button("Cancel");

        tempForm.add(instructLabel);
        tempForm.add(recipeNameLabel);
        tempForm.add(nameField);
        tempForm.add(servingsLabel);
        tempForm.add(servingsField);
        tempForm.add(caloriesLabel);
        tempForm.add(caloriesField);
        tempForm.add(cookTimeLabel);
        tempForm.add(cookTimeField);

        tempForm.add(ingrLabel);
        tempForm.add(ingredContainer);
        tempForm.add(addIngredientButton);

        tempForm.add(direcLabel);
        tempForm.add(direcContainer);
        tempForm.add(addDirectionButton);

        tempForm.add(addButton);
        tempForm.add(cancelButton);

        addIngredientButton.addActionListener((e)  ->
        {
            ingredContainer.add(new TextField("", "Ingredient", 40, TextArea.ANY));
            setAddCustomRecipeForm();
        });

        addDirectionButton.addActionListener((e)  ->
        {
            direcContainer.add(new TextField("", "Direction", 40, TextArea.ANY));
            setAddCustomRecipeForm();
        });


        addButton.addActionListener((e) ->
        {
            newRecipe.setName(nameField.getText());
            newRecipe.setServings(servingsField.getText());
            newRecipe.setCalories(Double.parseDouble(caloriesField.getText()));
            newRecipe.setCookTimeMinutes(Float.parseFloat(cookTimeField.getText()));

            List<Component> ingredList = ingredContainer.getChildrenAsList(true);
            for(Component a: ingredList)
            {
                TextField ingrField = (TextField) a;
                if(ingrField.getText() != null) {
                    newRecipe.addIngredient(new RecipeIngredient(0, null, new Ingredient(ingrField.getText())));
                }
            }

            List<Component> direcList = direcContainer.getChildrenAsList(true);
            for(Component a: direcList)
            {
                TextField direcField = (TextField) a;
                if(direcField.getText() != null) {
                    newRecipe.addDirection(direcField.getText());
                }
            }

            currentUser.addCustomRecipe(newRecipe);
            mainMenuForm.show();
        });
        cancelButton.addActionListener((e) -> savedRecipesForm.show());

        addCustomRecipeForm = tempForm;
    }

    public void setFavoriteRecipesForm() {
        Form tempForm = new Form("Favorite Recipes", BoxLayout.y());
        ArrayList<Button> recipeButtons = new ArrayList<>();

        for(String rec: currentUser.getFavoriteRecipes().keySet())
        {
            Button tempButton = new Button(rec);
            tempButton.addActionListener((e) ->
            {
                setRecipeForm(currentUser.getFavoriteRecipes().get(rec));
                setPreviousForm(favoriteRecipesForm);
                recipeForm.show();
            });
            recipeButtons.add(tempButton);
        }

        Label blankLabel = new Label(" ");
        Button homeButton = new Button("Home");
        Button backButton = new Button("Back");

        for(Button but: recipeButtons)
        {
            tempForm.add(but);
        }
        tempForm.add(blankLabel);
        tempForm.add(homeButton);
        tempForm.add(backButton);
        homeButton.addActionListener((e) -> mainMenuForm.show());
        backButton.addActionListener((e) -> savedRecipesForm.show());

        favoriteRecipesForm = tempForm;
    }

    public void setProfileForm() {
        Form tempForm = new Form("Profile", BoxLayout.y());
        String allergyString = "Current Allergies: ";
        for(String allergy: currentUser.getRestrictedIngredients()) {
            allergyString += (allergy + ", ");
        }
        SpanLabel allergiesLabel = new SpanLabel(allergyString);
        Button homeButton = new Button("Home");

        tempForm.add(allergiesLabel);
        tempForm.add(homeButton);

        homeButton.addActionListener((e) -> mainMenuForm.show());

        profileForm = tempForm;
    }

    public void setNewUserForm() {
        Form tempForm = new Form("New User", BoxLayout.y());
        SpanLabel welcome = new SpanLabel("Welcome! Please answer a few questions so our app can better recommend you meals that fit your preferences. These options can be set later in your Profile.");

        Label cuisineLabel = new Label("Click below to pick your favorite cuisines");
        Button cuisineButton = new Button("Favorite Cuisines");

        Label allergiesLabel = new Label("Click below if you have any allergies");
        Button allergiesButton = new Button("Allergies");

        Label doneLabel = new Label("When finished, hit Done");
        Button doneButton = new Button("Done");

        tempForm.add(welcome);
        tempForm.add(cuisineLabel);
        tempForm.add(cuisineButton);
        tempForm.add(allergiesLabel);
        tempForm.add(allergiesButton);
        tempForm.add(doneLabel);
        tempForm.add(doneButton);

        cuisineButton.addActionListener((e) -> favoriteCuisinesForm.show());
        allergiesButton.addActionListener((e) -> allergiesForm.show());
        doneButton.addActionListener((e) -> mainMenuForm.show());

        newUserForm = tempForm;
    }

    public void setFavoriteCuisineForm() {
        Form tempForm = new Form("Favorite Cuisines", BoxLayout.y());

        Label favoriteLabel = new Label("Please check your favorite cuisines.");
        ArrayList<CheckBox> cuisineCheckBoxes = new ArrayList<>();
        for (String a : cuisineTypes) {
            cuisineCheckBoxes.add(new CheckBox(a));
        }

        Button backButton = new Button("Back");

        tempForm.add(favoriteLabel);
        for (CheckBox c : cuisineCheckBoxes) {
            c.setToggle(true);
            tempForm.add(c);
        }
        tempForm.add(backButton);

        backButton.addActionListener((e) -> {

            for (CheckBox c : cuisineCheckBoxes) {
                if (c.isSelected()) {
                    currentUser.addLikedCuisine(c.getText());
                }
            }
            newUserForm.show();
        });

        favoriteCuisinesForm = tempForm;
    }

    public void setAllergiesForm() {
        Form tempForm = new Form("Allergies", BoxLayout.y());

        Label allergyLabel = new Label("Please check any allergies.");

        ArrayList<CheckBox> allergyCheckBoxes = new ArrayList<>();
        for (String a : allergies) {
            allergyCheckBoxes.add(new CheckBox(a));
        }

        Button backButton = new Button("Back");

        tempForm.add(allergyLabel);
        for (CheckBox c : allergyCheckBoxes) {
            c.setToggle(true);
            tempForm.add(c);
        }
        tempForm.add(backButton);

        backButton.addActionListener((e) -> {

            for (CheckBox c : allergyCheckBoxes) {
                if (c.isSelected()) {
                    currentUser.addRestrictedIngredient(c.getText());
                }
            }
            newUserForm.show();
        });

        allergiesForm = tempForm;
    }

    public void setPreviousForm(Form a)
    {
        previousForm = a;
    }

    public void showPreviousForm()
    {
        previousForm.show();
    }

    public void setUpForms() {
        setMainMenuForm();
        setFuturePlanningForm();
        setFutureRecipesForm();
        setFutureAddForm();
        setSavedRecipesForm();
        setMyRecipesForm();
        setAddCustomRecipeForm();
        setFavoriteRecipesForm();
        setNewUserForm();
        setFavoriteCuisineForm();
        setAllergiesForm();
        setProfileForm();
        setBrowseForm();
        setRecommendedForm();
        setSearchForm();
    }

    public void init(Object context) {
        
        /**
         * This sets up the hashmap off startup.
         */
        initializeHashMap();
        
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if (err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });
    }

    public void start() {
        
        setUpForms();

        if (currentUser.isNewUser()) {
            newUserForm.show();
        } else {
            mainMenuForm.show();
        }

    }

    public void stop() {
        currentForm = getCurrentForm();
        if (currentForm instanceof Dialog) {
            ((Dialog) currentForm).dispose();
            currentForm = getCurrentForm();
        }
    }

    public void destroy() {
    }

}
