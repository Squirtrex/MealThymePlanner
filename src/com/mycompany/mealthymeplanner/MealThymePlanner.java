package com.mycompany.mealthymeplanner;


import com.codename1.components.SpanLabel;
import static com.codename1.ui.CN.*;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import com.codename1.ui.Toolbar;
import java.io.IOException;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.io.NetworkEvent;
import com.codename1.ui.Button;
import com.codename1.ui.CheckBox;
import com.codename1.ui.TextArea;
import com.codename1.ui.TextField;
import com.codename1.ui.layouts.GridLayout;
import com.codename1.ui.spinner.Picker;
import com.codename1.ui.table.TableLayout;
import java.util.ArrayList;
import java.util.Arrays;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename
 * One</a> for the purpose of building native mobile applications using Java.
 */
public class MealThymePlanner {

    /**
     * This holds the hashmap after being initialized.
     */
    HashMap<String, Recipe> hashmap;
    
    private Form currentForm;
    private Form previousForm;
    private Resources theme;
    private Form mainMenuForm;
    private Form futurePlanningForm;
    private Form savedRecipesForm;
    private Form newUserForm;
    private Form favoriteCuisinesForm;
    private Form allergiesForm;
    private Form myRecipesForm;
    private Form addCustomRecipeForm;
    private Form favoriteRecipesForm;
    private Form profileForm;
    private Form browseForm;
    private Form recommendedForm;
    private Form groceryListForm;
    private Form searchForm;
    private Form recipeForm;

    private User currentUser = new User();
    private ArrayList<String> cuisineTypes = new ArrayList<>(Arrays.asList("Italian", "Mexican", "American", "Asian", "African", "Middle Eastern"));
    private ArrayList<String> allergies = new ArrayList<>(Arrays.asList("Dairy", "Gluten", "Nuts", "Shellfish"));
    private Recipe testRecipe = new Recipe("Test Name", new ArrayList<RecipeIngredient>(), new ArrayList<String>(), "5 servings", 800, 30, new ArrayList<RecipeTag>());

    /**
     * This builds the hashmap and places it into the hashmap variable.
     */
    public void initializeHashMap(){
        try {
            CSV_to_HashMap h = new CSV_to_HashMap();
            hashmap = h;
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
    
    public void setMainMenuForm() {
        Form tempForm = new Form("Main Menu", new GridLayout(4, 2));
        Button recommendedButton = new Button("Recommended For You");
        Button savedRecipesButton = new Button("Saved Recipes");
        Button browseButton = new Button("Browse");
        Button searchButton = new Button("Search");
        Button groceryListButton = new Button("Grocery List");
        Button futureButton = new Button("Plan Future Meals");
        Button profileButton = new Button("Profile");
        tempForm.add(recommendedButton);
        tempForm.add(savedRecipesButton);
        tempForm.add(browseButton);
        tempForm.add(searchButton);
        tempForm.add(groceryListButton);
        tempForm.add(futureButton);
        tempForm.add(profileButton);

        recommendedButton.addActionListener((e) -> recommendedForm.show());
        savedRecipesButton.addActionListener((e) -> savedRecipesForm.show());
        browseButton.addActionListener((e) -> browseForm.show());
        searchButton.addActionListener((e) -> searchForm.show());
        groceryListButton.addActionListener((e) -> groceryListForm.show());
        futureButton.addActionListener((e) -> futurePlanningForm.show());
        profileButton.addActionListener((e) -> profileForm.show());

        mainMenuForm = tempForm;
    }
    
    public void setRecipeForm(Recipe recipe) {
        Form tempForm = new Form("Recipe", BoxLayout.y());
        
        Label recipeNameLabel = new Label(recipe.getName());
        Label servingsLabel = new Label("Servings: " + recipe.getServings());
        Label caloriesLabel = new Label("Calories: " + recipe.getCalories());
        Label cookTimeLabel = new Label("Cook Time: " + recipe.getCookTimeMinutes() + " minutes"); 
        Label ingrLabel = new Label("Ingredients: "); 
        ArrayList<Label> ingredientLabels = new ArrayList<>();
        
        for(RecipeIngredient ingred: recipe.getIngredients())
        {
            ingredientLabels.add(new Label(ingred.toString()));
        }        
        
        Label dirLabel = new Label("Directions: "); 
        ArrayList<Label> directionsLabels = new ArrayList<>();
        
        for(String direc: recipe.getDirections())
        {
            directionsLabels.add(new Label(direc));
        }    

        Button homeButton = new Button("Home");
        
        tempForm.add(recipeNameLabel);
        tempForm.add(servingsLabel);
        tempForm.add(caloriesLabel);
        tempForm.add(cookTimeLabel);
        tempForm.add(ingrLabel);        
        for (Label lab : ingredientLabels) {
            tempForm.add(lab);
        }
        tempForm.add(dirLabel);
        for (Label lab : directionsLabels) {
            tempForm.add(lab);
        }        
        tempForm.add(homeButton);
        homeButton.addActionListener((e) -> mainMenuForm.show());

        recipeForm = tempForm;
    }

    public void setFuturePlanningForm() {
        Form tempForm = new Form("Plan Future Meals", BoxLayout.y());
        Button homeButton = new Button("Home");
        tempForm.add(homeButton);
        homeButton.addActionListener((e) -> mainMenuForm.show());

        futurePlanningForm = tempForm;
    }
    
    public void setBrowseForm() {
        Form tempForm = new Form("Browse", BoxLayout.y());
        Button homeButton = new Button("Home");
        tempForm.add(homeButton);
        homeButton.addActionListener((e) -> mainMenuForm.show());

        browseForm = tempForm;
    }
    
    public void setRecommendedForm() {
        Form tempForm = new Form("Recommended For You", BoxLayout.y());
        Button homeButton = new Button("Home");
        Button testButton = new Button("Test Recipe");
        tempForm.add(homeButton);
        tempForm.add(testButton);
        homeButton.addActionListener((e) -> mainMenuForm.show());
        testButton.addActionListener((e) -> 
        {   
            setRecipeForm(testRecipe);
            recipeForm.show();
        });

        recommendedForm = tempForm;
    }
    
    public void setGroceryListForm() {
        Form tempForm = new Form("Grocery List", BoxLayout.y());
        Button homeButton = new Button("Home");
        tempForm.add(homeButton);
        homeButton.addActionListener((e) -> mainMenuForm.show());

        groceryListForm = tempForm;
    }
    
    public void setSearchForm() {
        Form tempForm = new Form("Search", BoxLayout.y());
        Button homeButton = new Button("Home");
        tempForm.add(homeButton);
        homeButton.addActionListener((e) -> mainMenuForm.show());

        searchForm = tempForm;
    }

    public void setSavedRecipesForm() {
        Form tempForm = new Form("Saved Recipes", BoxLayout.y());
        Button homeButton = new Button("Home");
        Button myRecipesButton = new Button("My Recipes");
        Button customButton = new Button("Add Custom Recipe");
        Button favoriteButton = new Button("Favorite Recipes");
        tempForm.add(homeButton);
        tempForm.add(myRecipesButton);
        tempForm.add(customButton);
        tempForm.add(favoriteButton);
        homeButton.addActionListener((e) -> mainMenuForm.show());
        myRecipesButton.addActionListener((e) -> myRecipesForm.show());
        customButton.addActionListener((e) -> addCustomRecipeForm.show());
        favoriteButton.addActionListener((e) -> favoriteRecipesForm.show());

        savedRecipesForm = tempForm;
    }

    public void setMyRecipesForm() {
        Form tempForm = new Form("My Recipes", BoxLayout.y());
        Button homeButton = new Button("Home");
        Button backButton = new Button("Back");
        tempForm.add(homeButton);
        tempForm.add(backButton);
        homeButton.addActionListener((e) -> mainMenuForm.show());
        backButton.addActionListener((e) -> savedRecipesForm.show());

        myRecipesForm = tempForm;
    }

    public void setAddCustomRecipeForm() {
        Form tempForm = new Form("Add Custom Recipe", BoxLayout.y());
        Button homeButton = new Button("Home");
        Button backButton = new Button("Back");
        tempForm.add(homeButton);
        tempForm.add(backButton);
        homeButton.addActionListener((e) -> mainMenuForm.show());
        backButton.addActionListener((e) -> savedRecipesForm.show());

        addCustomRecipeForm = tempForm;
    }

    public void setFavoriteRecipesForm() {
        Form tempForm = new Form("Favorite Recipes", BoxLayout.y());
        Button homeButton = new Button("Home");
        Button backButton = new Button("Back");
        tempForm.add(homeButton);
        tempForm.add(backButton);
        homeButton.addActionListener((e) -> mainMenuForm.show());
        backButton.addActionListener((e) -> savedRecipesForm.show());

        favoriteRecipesForm = tempForm;
    }

    public void setProfileForm() {
        Form tempForm = new Form("Profile", BoxLayout.y());
        Button homeButton = new Button("Home");

        tempForm.add(homeButton);

        homeButton.addActionListener((e) -> mainMenuForm.show());

        profileForm = tempForm;
    }

    public void setNewUserForm() {
        Form tempForm = new Form("New User", BoxLayout.y());
        SpanLabel welcome = new SpanLabel("Welcome! Please answer a few questions so our app can better recommend you meals that fit your preferences. These options can be set later in your Profile.");

        Label cuisineLabel = new Label("Click below to pick your favorite cuisines");
        Button cuisineButton = new Button("Favorite Cuisines");

        Label allergiesLabel = new Label("Click below if you have any allergies");
        Button allergiesButton = new Button("Allergies");

        Label doneLabel = new Label("When finished, hit Done");
        Button doneButton = new Button("Done");

        tempForm.add(welcome);
        tempForm.add(cuisineLabel);
        tempForm.add(cuisineButton);
        tempForm.add(allergiesLabel);
        tempForm.add(allergiesButton);
        tempForm.add(doneLabel);
        tempForm.add(doneButton);

        cuisineButton.addActionListener((e) -> favoriteCuisinesForm.show());
        allergiesButton.addActionListener((e) -> allergiesForm.show());
        doneButton.addActionListener((e) -> mainMenuForm.show());

        newUserForm = tempForm;
    }

    public void setFavoriteCuisineForm() {
        Form tempForm = new Form("Favorite Cuisines", BoxLayout.y());

        Label favoriteLabel = new Label("Please check your favorite cuisines.");
        ArrayList<CheckBox> cuisineCheckBoxes = new ArrayList<>();
        for (String a : cuisineTypes) {
            cuisineCheckBoxes.add(new CheckBox(a));
        }

        Button backButton = new Button("Back");

        tempForm.add(favoriteLabel);
        for (CheckBox c : cuisineCheckBoxes) {
            c.setToggle(true);
            tempForm.add(c);
        }
        tempForm.add(backButton);

        backButton.addActionListener((e) -> {

            for (CheckBox c : cuisineCheckBoxes) {
                if (c.isSelected()) {
                    currentUser.addLikedCuisine(c.getText());
                }
            }
            newUserForm.show();
        });

        favoriteCuisinesForm = tempForm;
    }

    public void setAllergiesForm() {
        Form tempForm = new Form("Allergies", BoxLayout.y());

        Label allergyLabel = new Label("Please check any allergies.");

        ArrayList<CheckBox> allergyCheckBoxes = new ArrayList<>();
        for (String a : allergies) {
            allergyCheckBoxes.add(new CheckBox(a));
        }

        Button backButton = new Button("Back");

        tempForm.add(allergyLabel);
        for (CheckBox c : allergyCheckBoxes) {
            c.setToggle(true);
            tempForm.add(c);
        }
        tempForm.add(backButton);

        backButton.addActionListener((e) -> {

            for (CheckBox c : allergyCheckBoxes) {
                if (c.isSelected()) {
                    currentUser.addRestrictedIngredient(c.getText());
                }
            }
            newUserForm.show();
        });

        allergiesForm = tempForm;
    }

    public void setUpForms() {
        setMainMenuForm();
        setFuturePlanningForm();
        setSavedRecipesForm();
        setMyRecipesForm();
        setAddCustomRecipeForm();
        setFavoriteRecipesForm();
        setNewUserForm();
        setFavoriteCuisineForm();
        setAllergiesForm();
        setProfileForm();
        setBrowseForm();
        setRecommendedForm();
        setGroceryListForm();
        setSearchForm();
    }

    public void init(Object context) {
        
        /**
         * This sets up the hashmap off startup.
         */
        initializeHashMap();
        
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if (err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });
    }

    public void start() {
        
        setUpForms();

        if (currentUser.isNewUser()) {
            newUserForm.show();
        } else {
            mainMenuForm.show();
        }

    }

    public void stop() {
        currentForm = getCurrentForm();
        if (currentForm instanceof Dialog) {
            ((Dialog) currentForm).dispose();
            currentForm = getCurrentForm();
        }
    }

    public void destroy() {
    }

}
